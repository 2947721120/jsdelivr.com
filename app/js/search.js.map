{"version":3,"file":"search.js","sources":["../.gobble-build/13-include/1/js/search.js"],"sourcesContent":["import _ from 'lodash';\r\nimport Promise from 'bluebird';\r\nimport algoliaSearch from 'algoliasearch';\r\nimport algoliaConfig from '../config/algolia';\r\nimport logger from './logger';\r\n\r\nlet appLog = logger('app');\r\nlet client = algoliaSearch(algoliaConfig.appID, algoliaConfig.readAccessToken);\r\nlet jsDelivrIndex = client.initIndex('jsDelivr');\r\nlet jsDelivrAssetsIndex = client.initIndex('jsDelivr_assets');\r\nlet noQuery = [];\r\n\r\n/**\r\n * Create an in-memory copy of the index and update in once an hour.\r\n */\r\nexport let db = {};\r\n\r\nupdateInMemoryIndex();\r\nsetInterval(updateInMemoryIndex, 3600000);\r\n\r\nexport default function (queryString, page) {\r\n\treturn Promise.try(() => {\r\n\t\tlet parsed = parseQuery(queryString);\r\n\t\tlet options = { page: page || 0 };\r\n\r\n\t\tif (parsed.facetFilters) {\r\n\t\t\toptions.facetFilters = parsed.facetFilters;\r\n\t\t}\r\n\r\n\t\tif (!parsed.query) {\r\n\t\t\tif (!parsed.facetFilters.length) {\r\n\t\t\t\t// No query, no filters. We can just show the first 10 projects.\r\n\t\t\t\treturn noQuery;\r\n\t\t\t} else {\r\n\t\t\t\t// Facet filters. No need to query Algolia for these.\r\n\t\t\t\treturn _.filter(db, function (project) {\r\n\t\t\t\t\tfor (let i = 0; i < parsed.facetFilters.length; i++) {\r\n\t\t\t\t\t\tif (project[parsed.facetFilters[i][0]] !== parsed.facetFilters[i][1]) {\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// We'll need to query Algolia.\r\n\t\tlet facetFilters = [];\r\n\r\n\t\t_.each(options.facetFilters, (filter) => {\r\n\t\t\tfacetFilters.push(`${filter[0]}:${filter[1]}`);\r\n\t\t});\r\n\r\n\t\toptions.facetFilters = facetFilters.join(',');\r\n\r\n\t\treturn jsDelivrIndex.search(parsed.query, options).then((response) => {\r\n\t\t\t_.each(response.hits, function (project) {\r\n\t\t\t\tproject.selectedVersion = project.lastversion;\r\n\r\n\t\t\t\tif (!project.assets.length) {\r\n\t\t\t\t\tproject.assets = db[project.name].assets;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\treturn response.hits;\r\n\t\t});\r\n\t});\r\n}\r\n\r\nconst ATTR_REGEXP = /\\s*(?:[a-z]+)\\s*:\\s*(?:.(?![a-z]*\\s*:))*/gi;\r\nconst QUERY_REGEXP = /^((?:(?:[^\\s:]+(?![a-z]*\\s*:))\\s*)*)/i;\r\n\r\nfunction parseQuery (queryString) {\r\n\tlet query = queryString.match(QUERY_REGEXP)[0].trim();\r\n\tlet substr = queryString.substr(query.length);\r\n\tlet filters = [];\r\n\tlet match;\r\n\r\n\twhile ((match = ATTR_REGEXP.exec(substr)) !== null) {\r\n\t\tlet temp = match[0].split(':');\r\n\t\tfilters.push([ temp[0].trim(), temp[1].trim() ]);\r\n\t}\r\n\r\n\treturn {\r\n\t\tquery,\r\n\t\tfacetFilters: filters,\r\n\t};\r\n}\r\n\r\nfunction updateInMemoryIndex () {\r\n\tlet index = {};\r\n\tnoQuery = [];\r\n\r\n\tgetAllProjects().then((projects) => {\r\n\t\t_.each(projects, (project) => {\r\n\t\t\tindex[project.name] = project;\r\n\t\t\tproject.selectedVersion = project.lastversion;\r\n\r\n\t\t\tif (!project.assets.length) {\r\n\t\t\t\tjsDelivrAssetsIndex.search('', { hitsPerPage: 100, facetFilters: `name:${project.name}` }).then((response) => {\r\n\t\t\t\t\tproject.assets = response.hits;\r\n\t\t\t\t}).catch((error) => {\r\n\t\t\t\t\tappLog.err(error);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t_.each(Object.keys(index).slice(0, 10), (name) => {\r\n\t\t\tnoQuery.push(index[name]);\r\n\t\t});\r\n\r\n\t\t_.forEach(index, (value, key) => {\r\n\t\t\tdb[key] = value;\r\n\t\t});\r\n\r\n\t\tappLog.info('In-memory copy of the index successfully updated.');\r\n\t}).catch((error) => {\r\n\t\tappLog.err(error);\r\n\t});\r\n}\r\n\r\nfunction getAllProjects (page = 0) {\r\n\t// Can't get more than 1000 projects at once.\r\n\tlet hitsPerPage = 1000;\r\n\r\n\treturn jsDelivrIndex.browse('', { page, hitsPerPage }).then((response) => {\r\n\t\tif (response.nbHits > hitsPerPage * (page + 1)) {\r\n\t\t\treturn getAllProjects(page + 1).then((response2) => {\r\n\t\t\t\treturn response.hits.concat(...response2);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn response.hits;\r\n\t});\r\n}\r\n"],"names":[],"mappings":"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"}