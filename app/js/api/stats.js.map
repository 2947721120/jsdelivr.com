{"version":3,"file":"stats.js","sources":["../.gobble-build/13-include/1/js/api/stats.js"],"sourcesContent":["import _ from 'lodash';\nimport request from 'request-promise';\nimport render from './stats/render';\nimport logger from '../logger';\n\nlet appLog = logger('app');\nlet statsCache = JSON.stringify({\n\tcedexis: {\n\t\tdecisions: [],\n\t\tperfmap: [],\n\t\tmap: [],\n\t},\n\tdns: {\n\t\tchart: [],\n\t},\n\tcdn: {\n\t\ttotal: {},\n\t},\n});\n\nupdateData();\nsetInterval(updateData, 3600000);\n\nexport default function (req, res) {\n\tres.set('Content-Type', 'application/json');\n\tres.send(statsCache);\n}\n\nfunction updateData () {\n\tappLog.info('Updating stats.');\n\n\trequest('http://dev.dakulov.com/jsdelivr/stats.php').then((body) => {\n\t\tappLog.debug('Got the following stats:');\n\t\tappLog.debug(body);\n\n\t\tvar data = JSON.parse(body);\n\t\tvar result = JSON.parse(statsCache); // Use previous data if something's missing.\n\n\t\tif (!_.isEmpty(data.dns.chart)) {\n\t\t\t// 1. Group by date.\n\t\t\t// 2. Convert to arrays of [ date, hits ].\n\t\t\t// 3. Remove today's (incomplete) stats.\n\t\t\tresult.dns.chart = _.map(_.groupBy(data.dns.chart, (entry) => {\n\t\t\t\tlet date = new Date(entry[0] * 1000);\n\t\t\t\treturn `${date.getFullYear()}-${date.getMonth()}-${date.getDate()}`;\n\t\t\t}), day => [ day[0][0], _.sum(day, entry => entry[1]) ]).slice(0, -1);\n\t\t}\n\n\t\tif (!_.isEmpty(data.cedexis.decisions)) {\n\t\t\t// 1. Group by date.\n\t\t\t// 2. Convert to arrays of [ date, MaxCDN, CloudFlare, KeyCDN, Quantil ].\n\t\t\tresult.cedexis.decisions = _.map(_.groupBy(data.cedexis.decisions, 1), (decisions, date) => {\n\t\t\t\treturn [\n\t\t\t\t\tNumber(date),\n\t\t\t\t\t_.find(decisions, decision => decision[0] === 'MaxCDN')[2],\n\t\t\t\t\t_.find(decisions, decision => decision[0] === 'CloudFlare')[2],\n\t\t\t\t\t_.find(decisions, decision => decision[0] === 'KeyCDN')[2],\n\t\t\t\t\t_.get(_.find(decisions, decision => decision[0] === 'quantil'), 2, null),\n\t\t\t\t];\n\t\t\t});\n\t\t}\n\n\t\tif (!_.isEmpty(data.cedexis.map)) {\n\t\t\t// 1. Generate the charts and save them as images.\n\t\t\t// 2. Use base64 encoding and include the images in the stats.\n\t\t\trender(_.map(_.groupBy(data.cedexis.map, 0), (countryData) => {\n\t\t\t\treturn _.map(countryData, entry => [ entry[1], entry[2] ]).sort((a, b) => a[0] - b[0]);\n\t\t\t})).then((images) => {\n\t\t\t\t_.forEach(images, (image, index) => {\n\t\t\t\t\tresult.cedexis.map[index][2] = image.toString('base64');\n\t\t\t\t});\n\n\t\t\t\tstatsCache = JSON.stringify(result);\n\t\t\t\tappLog.info('Chart images generated.');\n\t\t\t}).catch((error) => {\n\t\t\t\tappLog.err(error);\n\t\t\t});\n\n\t\t\t// 1. Group by country.\n\t\t\t// 2. Reformat country names (Congo, The Democratic Republic of the -> The Democratic Republic of the Congo).\n\t\t\t// 3. Sum hits per country.\n\t\t\tresult.cedexis.map = _.map(_.groupBy(data.cedexis.map, 0), (data, country) => {\n\t\t\t\treturn [ friendlyCountryName(country), _.sum(data, entry => entry[2]) ];\n\t\t\t});\n\t\t}\n\n\t\t// 1. Group by country.\n\t\t// 2. Reformat country names.\n\t\t// 3. Get median of the values.\n\t\tif (!_.isEmpty(data.cedexis.perfmap)) {\n\t\t\tresult.cedexis.perfmap = _.map(_.groupBy(data.cedexis.perfmap, 0), (data, country) => {\n\t\t\t\treturn [ friendlyCountryName(country), Math.round(median(_.map(data, entry => entry[2]))) ];\n\t\t\t});\n\t\t}\n\n\t\tresult.cedexis.total = data.cedexis.total || result.cedexis.total;\n\t\tresult.cdn.total.hits = data.cdn.total.hits || result.cdn.total.hits;\n\t\tresult.cdn.total.traffic = data.cdn.total.traffic || result.cdn.total.traffic;\n\t\tresult.dns.total = data.dns.total || result.dns.total;\n\t\tresult.lastUpdate = Date.now();\n\t\tstatsCache = JSON.stringify(result);\n\n\t\tappLog.info('Stats successfully updated.');\n\t\tappLog.debug(_.clone(result, true));\n\t}).catch((error) => {\n\t\tappLog.err(error);\n\t});\n}\n\nfunction friendlyCountryName (name) {\n\tlet index = name.indexOf(',');\n\n\treturn ~index\n\t\t? `${name.substring(index + 2)} ${name.substring(0, index)}`\n\t\t: name;\n}\n\nfunction median (values) {\n\tvalues = values.slice().sort((a, b) => a - b);\n\n\treturn values.length % 2\n\t\t? values[(values.length - 1) / 2]\n\t\t: (values[values.length / 2] + values[values.length / 2 - 1]) / 2;\n}\n"],"names":[],"mappings":"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"}